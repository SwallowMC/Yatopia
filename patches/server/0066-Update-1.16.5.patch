From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Alex Cui <cuizhihui030925@outlook.com>
Date: Fri, 15 Jan 2021 16:56:36 +0800
Subject: [PATCH] Update 1.16.5


diff --git a/src/main/java/co/aikar/timings/TimingsExport.java b/src/main/java/co/aikar/timings/TimingsExport.java
index 3ec187f39250214a7a72b1d7ef7b3e2ec0c09cfa..694556094d24b3eb003a6426a5b6b291b8b8900d 100644
--- a/src/main/java/co/aikar/timings/TimingsExport.java
+++ b/src/main/java/co/aikar/timings/TimingsExport.java
@@ -234,7 +234,8 @@ public class TimingsExport extends Thread {
                 pair("paper", mapAsJSON(Bukkit.spigot().getPaperConfig(), null)),
                 pair("tuinity", mapAsJSON(Bukkit.spigot().getTuinityConfig(), null)), // Tuinity - add config to timings report
                 pair("purpur", mapAsJSON(Bukkit.spigot().getPurpurConfig(), null))
-                , pair("yatopia", mapAsJSON(Bukkit.spigot().getYatopiaConfig(), null)) // Yatopia - add config to timings report
+                , pair("yatopia", mapAsJSON(Bukkit.spigot().getYatopiaConfig(), null)), // Yatopia - add config to timings report
+                pair("swallow", mapAsJSON(Bukkit.spigot().getSwallowConfig(), null)) // Swallow - add config to timings report
                 // Purpur end
         ));
 
diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index 2473eb88ec7be3f4935debe04eeabcc0815b3233..caae8dd6ba1804b7d5b8f4849a061daec0a5e854 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -189,6 +189,16 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
         }
         org.yatopiamc.yatopia.server.YatopiaConfig.registerCommands();
         // Yatopia end
+
+        // Swallow start 
+        try {
+            org.swallowmc.swallow.server.SwallowConfig.init((java.io.File) options.valueOf("swallow-settings"));
+        } catch (Exception e) {
+            DedicatedServer.LOGGER.error("Unable to load server configuration", e);
+            return false;
+        }
+        org.swallowmc.swallow.server.SwallowConfig.registerCommands();
+        // Swallow end
         de.minebench.origami.OrigamiConfig.init((java.io.File) options.valueOf("origami-settings"));
         this.setPVP(dedicatedserverproperties.pvp);
         this.setAllowFlight(dedicatedserverproperties.allowFlight);
diff --git a/src/main/java/net/minecraft/server/EntityFallingBlock.java b/src/main/java/net/minecraft/server/EntityFallingBlock.java
index 76aac1b131f314775e418339e434f4f2da2ad619..5b89d0d6b87e2c77eefe156050507485ab3198ae 100644
--- a/src/main/java/net/minecraft/server/EntityFallingBlock.java
+++ b/src/main/java/net/minecraft/server/EntityFallingBlock.java
@@ -65,7 +65,9 @@ public class EntityFallingBlock extends Entity {
     @Override
     public void tick() {
         // Paper start - fix sand duping
-        if (this.dead) {
+        // Swallow start - fix fixed sand duping and add config for it
+        if (!org.swallowmc.swallow.server.SwallowConfig.allowSandDuping && this.dead) {
+        // Swallow end - fix fixed sand duping and add config for it
             return;
         }
         // Paper end - fix sand duping
@@ -92,7 +94,9 @@ public class EntityFallingBlock extends Entity {
             this.move(EnumMoveType.SELF, this.getMot());
 
             // Paper start - fix sand duping
-            if (this.dead) {
+            // Swallow start - fix fixed sand duping
+            if (!org.swallowmc.swallow.server.SwallowConfig.allowSandDuping && this.dead) {
+            // Swallow end - fix fixed sand duping
                 return;
             }
             // Paper end - fix sand duping
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index fd2fe2f5e53f34957f80223e1694a57308de4016..fb771df5ac50513745c7f425fd0f89fa435e07ae 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -188,7 +188,8 @@ public abstract class PlayerList {
         // Spigot - view distance
         playerconnection.sendPacket(new PacketPlayOutLogin(entityplayer.getId(), entityplayer.playerInteractManager.getGameMode(), entityplayer.playerInteractManager.c(), BiomeManager.a(worldserver1.getSeed()), worlddata.isHardcore(), this.server.F(), this.s, worldserver1.getDimensionManager(), worldserver1.getDimensionKey(), this.getMaxPlayers(), worldserver1.getChunkProvider().playerChunkMap.getLoadViewDistance(), flag1, !flag, worldserver1.isDebugWorld(), worldserver1.isFlatWorld())); // Paper - no-tick view distance
         entityplayer.getBukkitEntity().sendSupportedChannels(); // CraftBukkit
-        playerconnection.sendPacket(new PacketPlayOutCustomPayload(PacketPlayOutCustomPayload.a, (new PacketDataSerializer(Unpooled.buffer())).a(org.yatopiamc.yatopia.server.YatopiaConfig.brandName))); // Yatopia
+        // playerconnection.sendPacket(new PacketPlayOutCustomPayload(PacketPlayOutCustomPayload.a, (new PacketDataSerializer(Unpooled.buffer())).a(org.yatopiamc.yatopia.server.YatopiaConfig.brandName))); // Yatopia // Swallow
+        playerconnection.sendPacket(new PacketPlayOutCustomPayload(PacketPlayOutCustomPayload.a, (new PacketDataSerializer(Unpooled.buffer())).a(org.swallowmc.swallow.server.SwallowConfig.brandName))); // Swallow
         playerconnection.sendPacket(new PacketPlayOutServerDifficulty(worlddata.getDifficulty(), worlddata.isDifficultyLocked()));
         playerconnection.sendPacket(new PacketPlayOutAbilities(entityplayer.abilities));
         playerconnection.sendPacket(new PacketPlayOutHeldItemSlot(entityplayer.inventory.itemInHandIndex));
diff --git a/src/main/java/net/pl3x/purpur/PurpurConfig.java b/src/main/java/net/pl3x/purpur/PurpurConfig.java
index 29ebf64a27ac34a2bfd11a904a5a30e01f766c43..e9027dd0295a75100d8cd8007015cd9e8ea4a5c0 100644
--- a/src/main/java/net/pl3x/purpur/PurpurConfig.java
+++ b/src/main/java/net/pl3x/purpur/PurpurConfig.java
@@ -182,7 +182,7 @@ public class PurpurConfig {
         if (!TimingsManager.hiddenConfigs.contains("settings.seed.end-spike")) TimingsManager.hiddenConfigs.add("settings.seed.end-spike");
     }
 
-    public static String serverModName = "Yatopia";
+    public static String serverModName = "Swallow"; // Swallow
     private static void serverModName() {
         serverModName = getString("settings.server-mod-name", serverModName);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 7d0f73c83a7f7f3c6becf3ed4348c6b2938a86b1..f3fae73a43b11ae0936a74ddc782b80c79d3ecb9 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -232,7 +232,7 @@ import javax.annotation.Nullable; // Paper
 import javax.annotation.Nonnull; // Paper
 
 public final class CraftServer implements Server {
-    private final String serverName = "Yatopia"; // Paper // Tuinity // Purpur // Yatopia
+    private final String serverName = "Swallow"; // Paper // Tuinity // Purpur // Yatopia // Swallow
     private final String serverVersion;
     private final String bukkitVersion = Versioning.getBukkitVersion();
     private final Logger logger = Logger.getLogger("Minecraft");
@@ -865,6 +865,7 @@ public final class CraftServer implements Server {
         com.tuinity.tuinity.config.TuinityConfig.init((File) console.options.valueOf("tuinity-settings")); // Tuinity - Server Config
         net.pl3x.purpur.PurpurConfig.init((File) console.options.valueOf("purpur-settings")); // Purpur
         de.minebench.origami.OrigamiConfig.init((File) console.options.valueOf("origami-settings")); // Origami - Server Config
+        org.swallowmc.swallow.server.SwallowConfig.init((File) console.options.valueOf("swallow-settings")); // Swallow - Server Config
         for (WorldServer world : console.getWorlds()) {
             world.worldDataServer.setDifficulty(config.difficulty);
             world.setSpawnFlags(config.spawnMonsters, config.spawnAnimals);
@@ -922,6 +923,7 @@ public final class CraftServer implements Server {
         com.destroystokyo.paper.PaperConfig.registerCommands(); // Paper
         net.pl3x.purpur.PurpurConfig.registerCommands(); // Purpur
         org.yatopiamc.yatopia.server.YatopiaConfig.registerCommands(); // Yatopia
+        org.swallowmc.swallow.server.SwallowConfig.registerCommands(); // Swallow
         overrideAllCommandBlockCommands = commandsConfiguration.getStringList("command-block-overrides").contains("*");
         ignoreVanillaPermissions = commandsConfiguration.getBoolean("ignore-vanilla-permissions");
 
@@ -2330,6 +2332,13 @@ public final class CraftServer implements Server {
         }
         // Yatopia end
 
+        // Swallow start
+        @Override
+        public YamlConfiguration getSwallowConfig() {
+            return org.swallowmc.swallow.server.SwallowConfig.config;
+        }
+        // Swallow end
+
         @Override
         public void broadcast(BaseComponent component) {
             for (Player player : getOnlinePlayers()) {
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 756be0886856aabc31e436f82948d3d069f66fef..4128b59cc29e2167380882e69a30ed2028d6146b 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -170,6 +170,14 @@ public class Main {
                         .describedAs("Yml file");
                 // Yatopia end
 
+                // Swallow start
+                acceptsAll(asList("swallow", "swallow-settings"), "File for swallow settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("swallow.yml"))
+                        .describedAs("Yml file");
+                // Swallow end
+
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
                         .withRequiredArg()
diff --git a/src/main/java/org/swallowmc/swallow/server/SwallowConfig.java b/src/main/java/org/swallowmc/swallow/server/SwallowConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..db02a92a0e5ebbfc50571e913e653b802fe9fd90
--- /dev/null
+++ b/src/main/java/org/swallowmc/swallow/server/SwallowConfig.java
@@ -0,0 +1,189 @@
+package org.swallowmc.swallow.server;
+
+import com.google.common.base.Throwables;
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.TimeUnit;
+import java.util.logging.Level;
+import java.util.regex.Pattern;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+// Copied from YatopiaConfig.java
+
+public class SwallowConfig {
+
+    public static File CONFIG_FILE;
+    private static final String HEADER = "This is the main configuration file for Swallow.\n"
+                        + "Swallow contains many breaking changes and settings, so know what you are doing!\n"
+                        + "You have been warned!\n";
+    /*========================================================================*/
+    public static YamlConfiguration config;
+    public static int version; // since we're remapping sidestreams' configs we need this public
+    public static boolean verbose; // since we're remapping sidestreams' configs we need this public
+    private static Map<String, Command> commands;
+    /*========================================================================*/
+
+    public static void init(File configFile) {
+        CONFIG_FILE = configFile;
+        config = new YamlConfiguration();
+        try {
+            config.load(CONFIG_FILE);
+        } catch (IOException ex) {
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load swallow.yml, please correct your syntax errors", ex);
+            throw Throwables.propagate(ex);
+        }
+        config.options().header(HEADER);
+        config.options().copyDefaults(true);
+        verbose = getBoolean("verbose", false);
+        version = getInt("config-version", 1);
+        set("config-version", 1);
+        removeLeftovers();
+        readConfig(SwallowConfig.class, null);
+    }
+
+    public static void registerCommands() {
+        // Swallow Delete 
+    }
+
+    private static void removeLeftovers() {
+        // this method is only to remove non-used values in the config
+
+        // leftover from rainforest
+    }
+
+    protected static void logError(String s) {
+        Bukkit.getLogger().severe(s);
+    }
+
+    protected static void log(String s) {
+        if (verbose) {
+            Bukkit.getLogger().info(s);
+        }
+    }
+
+    static void readConfig(Class<?> clazz, Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(instance);
+                    } catch (InvocationTargetException ex) {
+                        throw Throwables.propagate(ex.getCause());
+                    } catch (Exception ex) {
+                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+                    }
+                }
+            }
+        }
+
+        try {
+            config.save(CONFIG_FILE);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+        }
+    }
+
+    private static final Pattern SPACE = Pattern.compile(" ");
+    private static final Pattern NOT_NUMERIC = Pattern.compile("[^-\\d.]");
+
+    public static int getSeconds(String str) {
+        str = SPACE.matcher(str).replaceAll("");
+        final char unit = str.charAt(str.length() - 1);
+        str = NOT_NUMERIC.matcher(str).replaceAll("");
+        double num;
+        try {
+            num = Double.parseDouble(str);
+        } catch (Exception e) {
+            num = 0D;
+        }
+        switch (unit) {
+            case 'd':
+                num *= (double) 60 * 60 * 24;
+                break;
+            case 'h':
+                num *= (double) 60 * 60;
+                break;
+            case 'm':
+                num *= 60;
+                break;
+            default:
+            case 's':
+                break;
+        }
+        return (int) num;
+    }
+
+    protected static String timeSummary(int seconds) {
+        String time = "";
+
+        if (seconds > 60 * 60 * 24) {
+            time += TimeUnit.SECONDS.toDays(seconds) + "d";
+            seconds %= 60 * 60 * 24;
+        }
+
+        if (seconds > 60 * 60) {
+            time += TimeUnit.SECONDS.toHours(seconds) + "h";
+            seconds %= 60 * 60;
+        }
+
+        if (seconds > 0) {
+            time += TimeUnit.SECONDS.toMinutes(seconds) + "m";
+        }
+        return time;
+    }
+
+    private static void set(String path, Object val) {
+        config.set(path, val);
+    }
+
+    private static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    private static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+    }
+
+    private static float getFloat(String path, float def) {
+        // TODO: Figure out why getFloat() always returns the default value.
+        return (float) getDouble(path, (double) def);
+    }
+
+    private static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+
+    private static <T> List<T> getList(String path, List<T> def) {
+        config.addDefault(path, def);
+        return (List<T>) config.getList(path, config.getList(path));
+    }
+
+    private static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+
+    public static boolean allowSandDuping = false;
+    private static void allowSandDuping() {
+        allowSandDuping = getBoolean("settings.allow-sand-duping", false);
+    }
+
+    public static String brandName = "Swallow";
+    private static void brandName() {
+        brandName = getString("brand-name", brandName);
+    }
+}
\ No newline at end of file
